{"version":3,"sources":["disposable.ts","enums.ts","webgl.ts","dsl.ts","command.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["/**\n * Resource that have to be destroyed manually (textures, tuffers, etc.)\n */\nexport interface Disposable {\n    dispose(): void;\n}\n\nexport namespace Disposable {\n    /**\n     * Compose array of resources into single disposable object\n     */\n    export function join(...items: Disposable[]): Disposable {\n        return {\n            dispose() {\n                items.forEach(v => v.dispose());\n            },\n        };\n    }\n}\n\n/**\n * Pass disposable object into function and destroy it after the call\n */\nexport function use<T extends Disposable, R>(item: T, callback: (item: T) => R) {\n    try {\n        return callback(item);\n    } finally {\n        item.dispose();\n    }\n}\n\n/**\n * The same as 'use', but it works with multiple resources and expects value constructors instead of values\n */\nexport function uses<Items extends (() => Disposable)[]>(\n    ...constructors: Items\n) {\n    return <R>(callback: (...items: { [key in keyof Items]: Items[key] extends () => Disposable ? ReturnType<Items[key]> : never }) => R): R => {\n        const values: Disposable[] = [];\n        try {\n            constructors.forEach(c => {\n                values.push(c());\n            });\n\n            return callback(...values as any);\n        } finally {\n            values.forEach(v => v.dispose());\n        }\n    }\n}\n","/**\n * Not every server WebGL implementation has it's own WebGLRenderingContext class\n */\nexport namespace GlEnum {\n\n    /* ClearBufferMask */\n    export const DEPTH_BUFFER_BIT = 0x00000100;\n    export const STENCIL_BUFFER_BIT = 0x00000400;\n    export const COLOR_BUFFER_BIT = 0x00004000;\n\n    /* BeginMode */\n    export const POINTS = 0x0000;\n    export const LINES = 0x0001;\n    export const LINE_LOOP = 0x0002;\n    export const LINE_STRIP = 0x0003;\n    export const TRIANGLES = 0x0004;\n    export const TRIANGLE_STRIP = 0x0005;\n    export const TRIANGLE_FAN = 0x0006;\n\n    /* AlphaFunction (not supported in ES20) */\n    /* NEVER */\n    /* LESS */\n    /* EQUAL */\n    /* LEQUAL */\n    /* GREATER */\n    /* NOTEQUAL */\n    /* GEQUAL */\n    /* ALWAYS */\n\n    /* BlendingFactorDest */\n    export const ZERO = 0;\n    export const ONE = 1;\n    export const SRC_COLOR = 0x0300;\n    export const ONE_MINUS_SRC_COLOR = 0x0301;\n    export const SRC_ALPHA = 0x0302;\n    export const ONE_MINUS_SRC_ALPHA = 0x0303;\n    export const DST_ALPHA = 0x0304;\n    export const ONE_MINUS_DST_ALPHA = 0x0305;\n\n    /* BlendingFactorSrc */\n    /* ZERO */\n    /* ONE */\n    export const DST_COLOR = 0x0306;\n    export const ONE_MINUS_DST_COLOR = 0x0307;\n    export const SRC_ALPHA_SATURATE = 0x0308;\n    /* SRC_ALPHA */\n    /* ONE_MINUS_SRC_ALPHA */\n    /* DST_ALPHA */\n    /* ONE_MINUS_DST_ALPHA */\n\n    /* BlendEquationSeparate */\n    export const FUNC_ADD = 0x8006;\n    export const BLEND_EQUATION = 0x8009;\n    export const BLEND_EQUATION_RGB = 0x8009; /* same as BLEND_EQUATION */\n    export const BLEND_EQUATION_ALPHA = 0x883D;\n\n    /* BlendSubtract */\n    export const FUNC_SUBTRACT = 0x800A;\n    export const FUNC_REVERSE_SUBTRACT = 0x800B;\n\n    /* Separate Blend Functions */\n    export const BLEND_DST_RGB = 0x80C8;\n    export const BLEND_SRC_RGB = 0x80C9;\n    export const BLEND_DST_ALPHA = 0x80CA;\n    export const BLEND_SRC_ALPHA = 0x80CB;\n    export const CONSTANT_COLOR = 0x8001;\n    export const ONE_MINUS_CONSTANT_COLOR = 0x8002;\n    export const CONSTANT_ALPHA = 0x8003;\n    export const ONE_MINUS_CONSTANT_ALPHA = 0x8004;\n    export const BLEND_COLOR = 0x8005;\n\n    /* Buffer Objects */\n    export const ARRAY_BUFFER = 0x8892;\n    export const ELEMENT_ARRAY_BUFFER = 0x8893;\n    export const ARRAY_BUFFER_BINDING = 0x8894;\n    export const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;\n\n    export const STREAM_DRAW = 0x88E0;\n    export const STATIC_DRAW = 0x88E4;\n    export const DYNAMIC_DRAW = 0x88E8;\n\n    export const BUFFER_SIZE = 0x8764;\n    export const BUFFER_USAGE = 0x8765;\n\n    export const CURRENT_VERTEX_ATTRIB = 0x8626;\n\n    /* CullFaceMode */\n    export const FRONT = 0x0404;\n    export const BACK = 0x0405;\n    export const FRONT_AND_BACK = 0x0408;\n\n    /* DepthFunction */\n    /* NEVER */\n    /* LESS */\n    /* EQUAL */\n    /* LEQUAL */\n    /* GREATER */\n    /* NOTEQUAL */\n    /* GEQUAL */\n    /* ALWAYS */\n\n    /* EnableCap */\n    /* TEXTURE_2D */\n    export const CULL_FACE = 0x0B44;\n    export const BLEND = 0x0BE2;\n    export const DITHER = 0x0BD0;\n    export const STENCIL_TEST = 0x0B90;\n    export const DEPTH_TEST = 0x0B71;\n    export const SCISSOR_TEST = 0x0C11;\n    export const POLYGON_OFFSET_FILL = 0x8037;\n    export const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;\n    export const SAMPLE_COVERAGE = 0x80A0;\n\n    /* ErrorCode */\n    export const NO_ERROR = 0;\n    export const INVALID_ENUM = 0x0500;\n    export const INVALID_VALUE = 0x0501;\n    export const INVALID_OPERATION = 0x0502;\n    export const OUT_OF_MEMORY = 0x0505;\n\n    /* FrontFaceDirection */\n    export const CW = 0x0900;\n    export const CCW = 0x0901;\n\n    /* GetPName */\n    export const LINE_WIDTH = 0x0B21;\n    export const ALIASED_POINT_SIZE_RANGE = 0x846D;\n    export const ALIASED_LINE_WIDTH_RANGE = 0x846E;\n    export const CULL_FACE_MODE = 0x0B45;\n    export const FRONT_FACE = 0x0B46;\n    export const DEPTH_RANGE = 0x0B70;\n    export const DEPTH_WRITEMASK = 0x0B72;\n    export const DEPTH_CLEAR_VALUE = 0x0B73;\n    export const DEPTH_FUNC = 0x0B74;\n    export const STENCIL_CLEAR_VALUE = 0x0B91;\n    export const STENCIL_FUNC = 0x0B92;\n    export const STENCIL_FAIL = 0x0B94;\n    export const STENCIL_PASS_DEPTH_FAIL = 0x0B95;\n    export const STENCIL_PASS_DEPTH_PASS = 0x0B96;\n    export const STENCIL_REF = 0x0B97;\n    export const STENCIL_VALUE_MASK = 0x0B93;\n    export const STENCIL_WRITEMASK = 0x0B98;\n    export const STENCIL_BACK_FUNC = 0x8800;\n    export const STENCIL_BACK_FAIL = 0x8801;\n    export const STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;\n    export const STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;\n    export const STENCIL_BACK_REF = 0x8CA3;\n    export const STENCIL_BACK_VALUE_MASK = 0x8CA4;\n    export const STENCIL_BACK_WRITEMASK = 0x8CA5;\n    export const VIEWPORT = 0x0BA2;\n    export const SCISSOR_BOX = 0x0C10;\n\n    /* SCISSOR_TEST */\n    export const COLOR_CLEAR_VALUE = 0x0C22;\n    export const COLOR_WRITEMASK = 0x0C23;\n    export const UNPACK_ALIGNMENT = 0x0CF5;\n    export const PACK_ALIGNMENT = 0x0D05;\n    export const MAX_TEXTURE_SIZE = 0x0D33;\n    export const MAX_VIEWPORT_DIMS = 0x0D3A;\n    export const SUBPIXEL_BITS = 0x0D50;\n    export const RED_BITS = 0x0D52;\n    export const GREEN_BITS = 0x0D53;\n    export const BLUE_BITS = 0x0D54;\n    export const ALPHA_BITS = 0x0D55;\n    export const DEPTH_BITS = 0x0D56;\n    export const STENCIL_BITS = 0x0D57;\n    export const POLYGON_OFFSET_UNITS = 0x2A00;\n    /* POLYGON_OFFSET_FILL */\n    export const POLYGON_OFFSET_FACTOR = 0x8038;\n    export const TEXTURE_BINDING_2D = 0x8069;\n    export const SAMPLE_BUFFERS = 0x80A8;\n    export const SAMPLES = 0x80A9;\n    export const SAMPLE_COVERAGE_VALUE = 0x80AA;\n    export const SAMPLE_COVERAGE_INVERT = 0x80AB;\n\n    /* GetTextureParameter */\n    /* TEXTURE_MAG_FILTER */\n    /* TEXTURE_MIN_FILTER */\n    /* TEXTURE_WRAP_S */\n    /* TEXTURE_WRAP_T */\n\n    export const COMPRESSED_TEXTURE_FORMATS = 0x86A3;\n\n    /* HintMode */\n    export const DONT_CARE = 0x1100;\n    export const FASTEST = 0x1101;\n    export const NICEST = 0x1102;\n\n    /* HintTarget */\n    export const GENERATE_MIPMAP_HINT = 0x8192;\n\n    /* DataType */\n    export const BYTE = 0x1400;\n    export const UNSIGNED_BYTE = 0x1401;\n    export const SHORT = 0x1402;\n    export const UNSIGNED_SHORT = 0x1403;\n    export const INT = 0x1404;\n    export const UNSIGNED_INT = 0x1405;\n    export const FLOAT = 0x1406;\n\n    /* PixelFormat */\n    export const DEPTH_COMPONENT = 0x1902;\n    export const ALPHA = 0x1906;\n    export const RGB = 0x1907;\n    export const RGBA = 0x1908;\n    export const LUMINANCE = 0x1909;\n    export const LUMINANCE_ALPHA = 0x190A;\n\n    /* PixelType */\n    /* UNSIGNED_BYTE */\n    export const UNSIGNED_SHORT_4_4_4_4 = 0x8033;\n    export const UNSIGNED_SHORT_5_5_5_1 = 0x8034;\n    export const UNSIGNED_SHORT_5_6_5 = 0x8363;\n\n    /* Shaders */\n    export const FRAGMENT_SHADER = 0x8B30;\n    export const VERTEX_SHADER = 0x8B31;\n    export const MAX_VERTEX_ATTRIBS = 0x8869;\n    export const MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;\n    export const MAX_VARYING_VECTORS = 0x8DFC;\n    export const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\n    export const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;\n    export const MAX_TEXTURE_IMAGE_UNITS = 0x8872;\n    export const MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;\n    export const SHADER_TYPE = 0x8B4F;\n    export const DELETE_STATUS = 0x8B80;\n    export const LINK_STATUS = 0x8B82;\n    export const VALIDATE_STATUS = 0x8B83;\n    export const ATTACHED_SHADERS = 0x8B85;\n    export const ACTIVE_UNIFORMS = 0x8B86;\n    export const ACTIVE_ATTRIBUTES = 0x8B89;\n    export const SHADING_LANGUAGE_VERSION = 0x8B8C;\n    export const CURRENT_PROGRAM = 0x8B8D;\n\n    /* StencilFunction */\n    export const NEVER = 0x0200;\n    export const LESS = 0x0201;\n    export const EQUAL = 0x0202;\n    export const LEQUAL = 0x0203;\n    export const GREATER = 0x0204;\n    export const NOTEQUAL = 0x0205;\n    export const GEQUAL = 0x0206;\n    export const ALWAYS = 0x0207;\n\n    /* StencilOp */\n    /* ZERO */\n    export const KEEP = 0x1E00;\n    export const REPLACE = 0x1E01;\n    export const INCR = 0x1E02;\n    export const DECR = 0x1E03;\n    export const INVERT = 0x150A;\n    export const INCR_WRAP = 0x8507;\n    export const DECR_WRAP = 0x8508;\n\n    /* StringName */\n    export const VENDOR = 0x1F00;\n    export const RENDERER = 0x1F01;\n    export const VERSION = 0x1F02;\n\n    /* TextureMagFilter */\n    export const NEAREST = 0x2600;\n    export const LINEAR = 0x2601;\n\n    /* TextureMinFilter */\n    /* NEAREST */\n    /* LINEAR */\n    export const NEAREST_MIPMAP_NEAREST = 0x2700;\n    export const LINEAR_MIPMAP_NEAREST = 0x2701;\n    export const NEAREST_MIPMAP_LINEAR = 0x2702;\n    export const LINEAR_MIPMAP_LINEAR = 0x2703;\n\n    /* TextureParameterName */\n    export const TEXTURE_MAG_FILTER = 0x2800;\n    export const TEXTURE_MIN_FILTER = 0x2801;\n    export const TEXTURE_WRAP_S = 0x2802;\n    export const TEXTURE_WRAP_T = 0x2803;\n\n    /* TextureTarget */\n    export const TEXTURE_2D = 0x0DE1;\n    export const TEXTURE = 0x1702;\n\n    export const TEXTURE_CUBE_MAP = 0x8513;\n    export const TEXTURE_BINDING_CUBE_MAP = 0x8514;\n    export const TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\n    export const TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\n    export const TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\n    export const TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\n    export const TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\n    export const TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;\n    export const MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;\n\n    /* TextureUnit */\n    export const TEXTURE0 = 0x84C0;\n    export const TEXTURE1 = 0x84C1;\n    export const TEXTURE2 = 0x84C2;\n    export const TEXTURE3 = 0x84C3;\n    export const TEXTURE4 = 0x84C4;\n    export const TEXTURE5 = 0x84C5;\n    export const TEXTURE6 = 0x84C6;\n    export const TEXTURE7 = 0x84C7;\n    export const TEXTURE8 = 0x84C8;\n    export const TEXTURE9 = 0x84C9;\n    export const TEXTURE10 = 0x84CA;\n    export const TEXTURE11 = 0x84CB;\n    export const TEXTURE12 = 0x84CC;\n    export const TEXTURE13 = 0x84CD;\n    export const TEXTURE14 = 0x84CE;\n    export const TEXTURE15 = 0x84CF;\n    export const TEXTURE16 = 0x84D0;\n    export const TEXTURE17 = 0x84D1;\n    export const TEXTURE18 = 0x84D2;\n    export const TEXTURE19 = 0x84D3;\n    export const TEXTURE20 = 0x84D4;\n    export const TEXTURE21 = 0x84D5;\n    export const TEXTURE22 = 0x84D6;\n    export const TEXTURE23 = 0x84D7;\n    export const TEXTURE24 = 0x84D8;\n    export const TEXTURE25 = 0x84D9;\n    export const TEXTURE26 = 0x84DA;\n    export const TEXTURE27 = 0x84DB;\n    export const TEXTURE28 = 0x84DC;\n    export const TEXTURE29 = 0x84DD;\n    export const TEXTURE30 = 0x84DE;\n    export const TEXTURE31 = 0x84DF;\n    export const ACTIVE_TEXTURE = 0x84E0;\n\n    /* TextureWrapMode */\n    export const REPEAT = 0x2901;\n    export const CLAMP_TO_EDGE = 0x812F;\n    export const MIRRORED_REPEAT = 0x8370;\n\n    /* Uniform Types */\n    export const FLOAT_VEC2 = 0x8B50;\n    export const FLOAT_VEC3 = 0x8B51;\n    export const FLOAT_VEC4 = 0x8B52;\n    export const INT_VEC2 = 0x8B53;\n    export const INT_VEC3 = 0x8B54;\n    export const INT_VEC4 = 0x8B55;\n    export const BOOL = 0x8B56;\n    export const BOOL_VEC2 = 0x8B57;\n    export const BOOL_VEC3 = 0x8B58;\n    export const BOOL_VEC4 = 0x8B59;\n    export const FLOAT_MAT2 = 0x8B5A;\n    export const FLOAT_MAT3 = 0x8B5B;\n    export const FLOAT_MAT4 = 0x8B5C;\n    export const SAMPLER_2D = 0x8B5E;\n    export const SAMPLER_CUBE = 0x8B60;\n\n    /* Vertex Arrays */\n    export const VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;\n    export const VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;\n    export const VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;\n    export const VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;\n    export const VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;\n    export const VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;\n    export const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\n\n    /* Read Format */\n    export const IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;\n    export const IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;\n\n    /* Shader Source */\n    export const COMPILE_STATUS = 0x8B81;\n\n    /* Shader Precision-Specified Types */\n    export const LOW_FLOAT = 0x8DF0;\n    export const MEDIUM_FLOAT = 0x8DF1;\n    export const HIGH_FLOAT = 0x8DF2;\n    export const LOW_INT = 0x8DF3;\n    export const MEDIUM_INT = 0x8DF4;\n    export const HIGH_INT = 0x8DF5;\n\n    /* Framebuffer Object. */\n    export const FRAMEBUFFER = 0x8D40;\n    export const RENDERBUFFER = 0x8D41;\n\n    export const RGBA4 = 0x8056;\n    export const RGB5_A1 = 0x8057;\n    export const RGB565 = 0x8D62;\n    export const DEPTH_COMPONENT16 = 0x81A5;\n    export const STENCIL_INDEX8 = 0x8D48;\n    export const DEPTH_STENCIL = 0x84F9;\n\n    export const RENDERBUFFER_WIDTH = 0x8D42;\n    export const RENDERBUFFER_HEIGHT = 0x8D43;\n    export const RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;\n    export const RENDERBUFFER_RED_SIZE = 0x8D50;\n    export const RENDERBUFFER_GREEN_SIZE = 0x8D51;\n    export const RENDERBUFFER_BLUE_SIZE = 0x8D52;\n    export const RENDERBUFFER_ALPHA_SIZE = 0x8D53;\n    export const RENDERBUFFER_DEPTH_SIZE = 0x8D54;\n    export const RENDERBUFFER_STENCIL_SIZE = 0x8D55;\n\n    export const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;\n    export const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;\n    export const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;\n    export const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\n\n    export const COLOR_ATTACHMENT0 = 0x8CE0;\n    export const DEPTH_ATTACHMENT = 0x8D00;\n    export const STENCIL_ATTACHMENT = 0x8D20;\n    export const DEPTH_STENCIL_ATTACHMENT = 0x821A;\n\n    export const NONE = 0;\n\n    export const FRAMEBUFFER_COMPLETE = 0x8CD5;\n    export const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;\n    export const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\n    export const FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;\n    export const FRAMEBUFFER_UNSUPPORTED = 0x8CDD;\n\n    export const FRAMEBUFFER_BINDING = 0x8CA6;\n    export const RENDERBUFFER_BINDING = 0x8CA7;\n    export const MAX_RENDERBUFFER_SIZE = 0x84E8;\n\n    export const INVALID_FRAMEBUFFER_OPERATION = 0x0506;\n\n    /* WebGL-specific enums */\n    export const UNPACK_FLIP_Y_WEBGL = 0x9240;\n    export const UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\n    export const CONTEXT_LOST_WEBGL = 0x9242;\n    export const UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\n    export const BROWSER_DEFAULT_WEBGL = 0x9244;\n\n}\n","import { Disposable, use, uses } from \"./disposable\";\nimport {\n    GlEnum,\n} from \"./enums\";\n\nenum BlendEquation {\n     Add = GlEnum.FUNC_ADD,\n     Sub = GlEnum.FUNC_SUBTRACT,\n     RSub = GlEnum.FUNC_REVERSE_SUBTRACT,\n}\n\nexport enum DepthFunction {\n    Never = GlEnum.NEVER,\n    Less = GlEnum.LESS,\n    Equal = GlEnum.EQUAL,\n    LWqual = GlEnum.LEQUAL,\n    Greater = GlEnum.GREATER,\n    NotEqual = GlEnum.NOTEQUAL,\n    GEqual = GlEnum.GEQUAL,\n    Always = GlEnum.ALWAYS,\n}\n\nexport enum BlendFunction {\n    Zero = GlEnum.ZERO,\n    One = GlEnum.ONE,\n    SrcColor = GlEnum.SRC_COLOR,\n    OneMinusSrcColor = GlEnum.ONE_MINUS_SRC_COLOR,\n    DstColor = GlEnum.DST_COLOR,\n    OneMinusDstColor = GlEnum.ONE_MINUS_DST_COLOR,\n    SrcAlpha = GlEnum.SRC_ALPHA,\n    OneMinusSrcAlpha = GlEnum.ONE_MINUS_SRC_ALPHA,\n    DstAlpha = GlEnum.DST_ALPHA,\n    OneMinusDstAlpha = GlEnum.ONE_MINUS_DST_ALPHA,\n    SrcAlphaSaturate = GlEnum.SRC_ALPHA_SATURATE,\n}\n\nexport enum TextureFilter {\n    Nearest = GlEnum.NEAREST,\n    Linear = GlEnum.LINEAR,\n}\n\nexport enum TextureFormat {\n    Alpha = GlEnum.ALPHA,\n    Luminance = GlEnum.LUMINANCE,\n    LuminanceAlpha = GlEnum.LUMINANCE_ALPHA,\n    Rgb = GlEnum.RGB,\n    Rgba = GlEnum.RGBA,\n}\n\nexport enum ShaderType {\n    Vertex = GlEnum.VERTEX_SHADER,\n    Fragment = GlEnum.FRAGMENT_SHADER,\n}\n\nexport const texturesCount = 16\n\nexport enum ErrorCode {\n    NoError = GlEnum.NO_ERROR,\n    InvalidEnum = GlEnum.INVALID_ENUM,\n    InvalidValue = GlEnum.INVALID_VALUE,\n    InvalidOperation = GlEnum.INVALID_OPERATION,\n    OutOfMemory = GlEnum.OUT_OF_MEMORY,\n}\n\nexport enum BufferUsage {\n    /**\n     * The data store contents will be modified once and used at most a few times.\n     */\n    Stream = GlEnum.STREAM_DRAW,\n    /**\n     * The data store contents will be modified once and used many times.\n     */\n    Static = GlEnum.STATIC_DRAW,\n    /**\n     * The data store contents will be modified repeatedly and used many times.\n     */\n    Dynamic = GlEnum.DYNAMIC_DRAW,\n}\n\nexport enum BufferTarget {\n    Array = GlEnum.ARRAY_BUFFER,\n    Elements = GlEnum.ELEMENT_ARRAY_BUFFER,\n}\n\nexport enum PrimitivesType {\n    Points = GlEnum.POINTS,\n    Lines = GlEnum.LINES,\n    LineStrip = GlEnum.LINE_STRIP,\n    LineLoop = GlEnum.LINE_LOOP,\n    Triangles = GlEnum.TRIANGLES,\n    TriangleStrip = GlEnum.TRIANGLE_STRIP,\n    TriangleFan = GlEnum.TRIANGLE_FAN,\n}\n\nexport class Gl implements Disposable {\n    readonly handle: WebGLRenderingContext;\n    readonly instancedArrays: ANGLE_instanced_arrays;\n    \n    private readonly settingsCache = SettingsCache.initial();\n\n    constructor(source: HTMLCanvasElement, settings: WebGLContextAttributes = {}) {\n        this.handle = source.getContext(\"webgl\", settings)!;\n        this.instancedArrays = this.handle.getExtension(\"ANGLE_instanced_arrays\")!;\n    }\n\n    isContextLost() {\n        return this.handle.isContextLost();\n    }\n\n    getPointSizeRange(): [number, number] {\n        return this.handle.getParameter(GlEnum.ALIASED_POINT_SIZE_RANGE);\n    }\n    cleanColorBuffer(): this {\n        this.handle.clear(GlEnum.COLOR_BUFFER_BIT);\n        return this\n    }\n    cleanDepthBuffer(): this {\n        this.handle.clear(GlEnum.DEPTH_BUFFER_BIT);\n        return this;\n    }\n    /**\n     * Clear color and depth buffer\n     */\n    cleanBuffers(): this {\n        this.handle.clear(GlEnum.COLOR_BUFFER_BIT | GlEnum.DEPTH_BUFFER_BIT);\n        return this;\n    }\n\n    drawArrays(primitivesType: PrimitivesType, verticesCount: number): this {\n        this.handle.drawArrays(primitivesType, 0, verticesCount);\n        return this;\n    }\n    drawsElements(primitivesType: PrimitivesType, elementsCount: number): this {\n        this.handle.drawElements(primitivesType, elementsCount, GlEnum.UNSIGNED_SHORT, 0);\n        return this;\n    }\n    drawInstancedArrays(primitivesType: PrimitivesType, verticesCount: number, instancesCount: number): this {\n        this.instancedArrays.drawArraysInstancedANGLE(primitivesType, 0, verticesCount, instancesCount);\n        return this;\n    }\n    drawsInstancedElements(primitivesType: PrimitivesType, elementsCount: number, instancesCount: number): this {\n        this.instancedArrays.drawElementsInstancedANGLE(primitivesType, elementsCount, GlEnum.UNSIGNED_SHORT, 0, instancesCount);\n        return this;\n    }\n\n    settings() {\n        return new Settings(this, this.settingsCache);\n    }\n\n    texture(config: TextureConfig) {\n        return new Texture(this, config);\n    }\n\n    arrayBuffer(data: Float32Array | number[] | null = null, usage: BufferUsage = BufferUsage.Dynamic) {\n        return new ArrayBuffer(this, data, usage);\n    }\n    elementsBuffer(data: Uint16Array | number[] | null = null, usage: BufferUsage = BufferUsage.Dynamic) {\n        return new ElementsBuffer(this, data, usage);\n    }\n\n    program(vertex: string, fragment: string) {\n        return uses(\n            () => new Shader(this, ShaderType.Vertex, vertex),\n            () => new Shader(this, ShaderType.Fragment, fragment),\n        )((vertex, fragment) => {\n            return new Program(this, vertex, fragment);\n        });\n    }\n\n    dispose() {\n        const ex = this.handle.getExtension(\"WEBGL_lose_context\");\n        if (ex) {\n            ex.loseContext();\n        }\n    }\n}\n\ninterface SettingsCache {\n    blend: boolean;\n    viewport: [number, number, number, number];\n    scissorTest: boolean;\n    scissorBox: [number, number, number, number];\n    depthTest: boolean;\n    depthFunction: DepthFunction;\n    clearDepth: number;\n    lineWidth: number;\n    blendEquation: [BlendEquation, BlendEquation];\n    blendFunction: [BlendFunction, BlendFunction, BlendFunction, BlendFunction];\n    clearColor: [number, number, number, number];\n    activeTexture: number;\n    textures: Map<number, Texture>;\n    arrayBuffer: ArrayBuffer | null;\n    elementsBuffer: ElementsBuffer | null;\n    program: Program | null;\n    enabledAttributes: Set<number>;\n    instancedAttributes: Set<number>;\n    renderBuffer: RenderBuffer | null;\n    frameBuffer: FrameBuffer | null;\n}\n\nnamespace SettingsCache {\n    export const initial =  (): SettingsCache => ({\n        blend: false,\n        viewport: [0, 0, 0, 0],\n        scissorTest: false,\n        scissorBox: [0, 0, 0, 0],\n        depthTest: false,\n        depthFunction: DepthFunction.Less,\n        clearDepth: 1.0,\n        lineWidth: 1.0,\n        blendEquation: [BlendEquation.Add, BlendEquation.Add],\n        blendFunction: [\n            BlendFunction.One,\n            BlendFunction.Zero,\n            BlendFunction.One,\n            BlendFunction.Zero,\n        ],\n        clearColor: [0, 0, 0, 0],\n        activeTexture: 0,\n        textures: new Map(),\n        arrayBuffer: null,\n        elementsBuffer: null,\n        program: null,\n        enabledAttributes: new Set(),\n        instancedAttributes: new Set(),\n        renderBuffer: null,\n        frameBuffer: null,\n    });\n}\n\nexport class Settings {\n    constructor(\n        public readonly gl: Gl,\n        private readonly cache: SettingsCache,\n        public readonly apply: <T>(callback: () => T) => T = (callback) => callback(),\n    ) {\n\n    }\n\n    private static cached<T>({ read, write, equals, apply }: {\n        read: (cache: SettingsCache) => T,\n        write: (cahe: SettingsCache, value: T) => void,\n        equals: (v1: T, v2: T) => boolean,\n        apply: (gl: Gl, value: T) => void,\n    }) {\n        return function (this: Settings, value: T) {\n            return this.then(new Settings(this.gl, this.cache, <R>(callback: () => R): R => {\n                const cached = read(this.cache);\n                if (equals(cached, value)) {\n                    return callback();\n                } else {\n                    try {\n                        write(this.cache, value);\n                        apply(this.gl, value);\n                        return callback();\n                    } finally {\n                        write(this.cache, cached);\n                        apply(this.gl, cached);\n                    }\n                }\n            }));\n        };\n    }\n\n    then(settings: Settings) {\n        return new Settings(this.gl, this.cache, (callback) => {\n            return this.apply(() => {\n                return settings.apply(callback);\n            });\n        });\n    }\n\n    blend = Settings.cached<boolean>({\n        read: cache => cache.blend,\n        write: (cache, value) => {\n            cache.blend = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            if (value) {\n                gl.handle.enable(GlEnum.BLEND);\n            } else {\n                gl.handle.disable(GlEnum.BLEND);\n            }\n        },\n    });\n\n    viewport = (() => {\n        const setting = Settings.cached<[number, number, number, number]>({\n            read: cache => cache.viewport,\n            write: (cached, value) => {\n                cached.viewport = value;\n            },\n            equals: (v1, v2) => v1.every((x, i) => x === v2[i]),\n            apply: (gl, [x, y, width, heigth]) => {\n                gl.handle.viewport(x, y, width, heigth);\n            },\n        });\n\n        return function (this: Settings, x: number, y: number, width: number, height: number) {\n            return setting.call(this, [x, y, width, height]);\n        };\n    })();\n\n    scissorTest = Settings.cached<boolean>({\n        read: cache => cache.scissorTest,\n        write: (cache, value) => {\n            cache.scissorTest = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            if (value) {\n                gl.handle.enable(GlEnum.SCISSOR_TEST);\n            } else {\n                gl.handle.disable(GlEnum.SCISSOR_TEST);\n            }\n        },\n    });\n\n    scissorBox = (() => {\n        const setting = Settings.cached<[number, number, number, number]>({\n            read: cache => cache.scissorBox,\n            write: (cached, value) => {\n                cached.scissorBox = value;\n            },\n            equals: (v1, v2) => v1.every((x, i) => x === v2[i]),\n            apply: (gl, [x, y, width, heigth]) => {\n                gl.handle.scissor(x, y, width, heigth);\n            },\n        });\n\n        return function (this: Settings, x: number, y: number, width: number, height: number) {\n            return setting.call(this, [x, y, width, height]);\n        };\n    })();\n\n    depthTest = Settings.cached<boolean>({\n        read: cache => cache.depthTest,\n        write: (cache, value) => {\n            cache.depthTest = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            if (value) {\n                gl.handle.enable(GlEnum.DEPTH_TEST);\n            } else {\n                gl.handle.disable(GlEnum.DEPTH_TEST);\n            }\n        },\n    });\n\n    clearDepth = Settings.cached<number>({\n        read: cache => cache.clearDepth,\n        write: (cache, value) => {\n            cache.clearDepth = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.clearDepth(value);\n        },\n    });\n\n    lineWidth = Settings.cached<number>({\n        read: cache => cache.lineWidth,\n        write: (cache, value) => {\n            cache.lineWidth = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.lineWidth(value);\n        },\n    });\n\n    blendEquation = (() => {\n        const setting = Settings.cached<[BlendEquation, BlendEquation]>({\n            read: cache => cache.blendEquation,\n            write: (cached, value) => {\n                cached.blendEquation = value;\n            },\n            equals: (v1, v2) => v1.every((x, i) => x === v2[i]),\n            apply: (gl, [rgb, alpha]) => {\n                gl.handle.blendEquationSeparate(rgb, alpha);\n            },\n        });\n\n        return function (this: Settings, rgb: BlendEquation, alpha: BlendEquation = rgb) {\n            return setting.call(this, [rgb, alpha]);\n        };\n    })();\n\n    blendFunction = (() => {\n        const setting = Settings.cached<[BlendFunction, BlendFunction, BlendFunction, BlendFunction]>({\n            read: cache => cache.blendFunction,\n            write: (cached, value) => {\n                cached.blendFunction = value;\n            },\n            equals: (v1, v2) => v1.every((x, i) => x === v2[i]),\n            apply: (gl, [srcRgb, dstRgb, srcAlpha, dstAlpha]) => {\n                gl.handle.blendFuncSeparate(srcRgb, dstRgb, srcAlpha, dstAlpha);\n            },\n        });\n\n        return function (\n            this: Settings,\n            srcRgb: BlendFunction,\n            dstRgb: BlendFunction,\n            srcAlpha: BlendFunction = srcRgb,\n            dstAlpha: BlendFunction = dstRgb,\n        ) {\n            return setting.call(this, [srcRgb, dstRgb, srcAlpha, dstAlpha]);\n        };\n    })();\n\n    depthFunction = Settings.cached<DepthFunction>({\n        read: cache => cache.depthFunction,\n        write: (cache, value) => {\n            cache.depthFunction = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.depthFunc(value);\n        },\n    });\n\n    clearColor = (() => {\n        const setting = Settings.cached<[number, number, number, number]>({\n            read: cache => cache.clearColor,\n            write: (cached, value) => {\n                cached.clearColor = value;\n            },\n            equals: (v1, v2) => v1.every((x, i) => x === v2[i]),\n            apply: (gl, [r, g, b, a]) => {\n                gl.handle.clearColor(r, g, b, a);\n            },\n        });\n\n        return function (this: Settings, r: number, g: number, b: number, a: number) {\n            return setting.call(this, [r, g, b, a]);\n        };\n    })();\n\n    activeTexture = Settings.cached<number>({\n        read: cache => cache.activeTexture,\n        write: (cache, value) => {\n            cache.activeTexture = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.activeTexture(GlEnum.TEXTURE0 + value);\n        },\n    });\n\n    texture = (() => {\n        const textures = new Array(16).fill(null).map((_, i) => {\n            return Settings.cached<Texture | null>({\n                read: cache => cache.textures.get(i) || null,\n                write: (cache, texture) => {\n                    if (texture) {\n                        cache.textures.set(i, texture);\n                    } else {\n                        cache.textures.delete(i);\n                    }\n                },\n                equals: (v1, v2) => v1 === v2,\n                apply: (gl, value) => {\n                    gl.settings().activeTexture(i).apply(() => {\n                        gl.handle.bindTexture(GlEnum.TEXTURE_2D, value?.handle || null);\n                    });\n                }\n            });\n        });\n\n        return function(this: Settings, i: number, texture: Texture | null) {\n            return textures[i].call(this, texture);\n        };\n    })();\n\n    textures(textures: (Texture | null)[]) {\n        let result: Settings = this;\n        for (let i = 0; i < 16; i++) {\n            result = result.texture(i, i >= textures.length ? null : textures[i]);\n        }\n        return result;\n    }\n\n    arrayBuffer = Settings.cached<ArrayBuffer | null>({\n        read: cache => cache.arrayBuffer,\n        write: (cache, value) => {\n            cache.arrayBuffer = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.bindBuffer(GlEnum.ARRAY_BUFFER, value?.handle ?? null);\n        },\n    });\n\n    elementsBuffer = Settings.cached<ElementsBuffer | null>({\n        read: cache => cache.elementsBuffer,\n        write: (cache, value) => {\n            cache.elementsBuffer = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.bindBuffer(GlEnum.ELEMENT_ARRAY_BUFFER, value?.handle ?? null);\n        },\n    });\n\n    program = Settings.cached<Program | null>({\n        read: cache => cache.program,\n        write: (cache, value) => {\n            cache.program = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.useProgram(value ? value.handle : null);\n        },\n    });\n\n    renderBuffer = Settings.cached<RenderBuffer | null>({\n        read: cache => cache.renderBuffer,\n        write: (cache, value) => {\n            cache.renderBuffer = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.bindRenderbuffer(GlEnum.RENDERBUFFER, value ? value.handle : null);\n        },\n    });\n\n    frameBuffer = Settings.cached<FrameBuffer | null>({\n        read: cache => cache.frameBuffer,\n        write: (cache, value) => {\n            cache.frameBuffer = value;\n        },\n        equals: (v1, v2) => v1 === v2,\n        apply: (gl, value) => {\n            gl.handle.bindFramebuffer(GlEnum.FRAMEBUFFER, value ? value.handle : null);\n        },\n    });\n\n    enabledAttributes(locations: number[]) {\n        return this.then(new Settings(this.gl, this.cache, (callback) => {\n            const handle = this.gl.handle;\n            const oldValue = this.cache.enabledAttributes;\n            const newValue = new Set(locations);\n            this.cache.enabledAttributes = newValue;\n\n            const applyDiff = (source: Set<number>, target: Set<number>) => {\n                for (let i of source) {\n                    if (!target.has(i)) {\n                        handle.disableVertexAttribArray(i);\n                    }\n                }\n                for (let i of target) {\n                    if (!source.has(i)) {\n                        handle.enableVertexAttribArray(i);\n                    }\n                }\n            };\n\n            try {\n                applyDiff(oldValue, newValue);\n                return callback();\n            } finally {\n                applyDiff(newValue, oldValue);\n                this.cache.enabledAttributes = oldValue;\n            }\n        }));\n    }\n\n    instancedAttributes(locations: number[]) {\n        return this.then(new Settings(this.gl, this.cache, (callback) => {\n            const handle = this.gl.instancedArrays;\n            const oldValue = this.cache.instancedAttributes;\n            const newValue = new Set(locations);\n            this.cache.instancedAttributes = newValue;\n\n            const applyDiff = (source: Set<number>, target: Set<number>) => {\n                for (let i of source) {\n                    if (!target.has(i)) {\n                        handle.vertexAttribDivisorANGLE(i, 0);\n                    }\n                }\n                for (let i of target) {\n                    if (!source.has(i)) {\n                        handle.vertexAttribDivisorANGLE(i, 1);\n                    }\n                }\n            };\n\n            try {\n                applyDiff(oldValue, newValue);\n                return callback();\n            } finally {\n                applyDiff(newValue, oldValue);\n                this.cache.instancedAttributes = oldValue;\n            }\n        }));\n    }\n\n    renderTarget(texture: Texture) {\n        return new Settings(this.gl, this.cache, (callback) => {\n            return use(new FrameBuffer(this.gl, texture), frameBuffer => {\n                return this.gl.settings()\n                    .frameBuffer(frameBuffer)\n                    .viewport(0, 0, texture.width, texture.height)\n                    .apply(callback);\n            });\n        });\n    }\n}\n\nexport type TextureConfig = {\n    /**\n     * @default TextureFormat.RGBA\n     */\n    format?: TextureFormat;\n    /**\n     * @default TextureFilter.NEAREST\n     */\n    filter?: TextureFilter;\n} & ({\n    image: TexImageSource;\n} | {\n    data: ArrayBufferView;\n    width: number;\n    height: number;\n} | {\n    width: number;\n    height: number;\n});\n\nexport class Texture {\n    readonly handle: WebGLTexture;\n    readonly width: number;\n    readonly height: number;\n    readonly format: TextureFormat;\n    readonly filter: TextureFilter;\n\n    constructor(public readonly gl: Gl, config: TextureConfig) {\n        this.handle = gl.handle.createTexture()!;\n\n        this.format = config.format || TextureFormat.Rgba;\n        this.filter = config.filter || TextureFilter.Nearest;\n\n        if (\"image\" in config) {\n            this.width = config.image instanceof HTMLImageElement\n                ? config.image.naturalWidth\n                : config.image.width;\n            this.height = config.image instanceof HTMLImageElement\n                ? config.image.naturalHeight\n                : config.image.height;\n        } else {\n            this.width = config.width;\n            this.height = config.height;\n        }\n\n        gl.settings().activeTexture(0).texture(0, this).apply(() => {\n            gl.handle.pixelStorei(GlEnum.UNPACK_FLIP_Y_WEBGL, 1);\n            gl.handle.texParameteri(GlEnum.TEXTURE_2D, GlEnum.TEXTURE_MAG_FILTER, this.filter);\n            gl.handle.texParameteri(GlEnum.TEXTURE_2D, GlEnum.TEXTURE_MIN_FILTER, this.filter);\n            gl.handle.texParameteri(GlEnum.TEXTURE_2D, GlEnum.TEXTURE_WRAP_S, GlEnum.CLAMP_TO_EDGE);\n            gl.handle.texParameteri(GlEnum.TEXTURE_2D, GlEnum.TEXTURE_WRAP_T, GlEnum.CLAMP_TO_EDGE);\n\n            if (\"image\" in config) {\n                gl.handle.texImage2D(\n                    GlEnum.TEXTURE_2D,\n                    0,\n                    this.format,\n                    this.format,\n                    GlEnum.UNSIGNED_BYTE,\n                    config.image,\n                );\n            } else {\n                gl.handle.texImage2D(\n                    GlEnum.TEXTURE_2D,\n                    0,\n                    this.format,\n                    this.width,\n                    this.height,\n                    0, // border\n                    this.format,\n                    GlEnum.UNSIGNED_BYTE,\n                    \"data\" in config ? config.data : null,\n                );\n            }\n        });\n    }\n\n    dispose() {\n        this.gl.handle.deleteTexture(this.handle);\n    }\n}\n\n\nexport class FrameBuffer implements Disposable {\n\n    readonly handle: WebGLFramebuffer;\n\n    constructor(\n        public readonly gl: Gl,\n        public readonly colorBuffer: Texture,\n        public readonly depthBuffer?: RenderBuffer,\n    ) {\n        this.handle = gl.handle.createFramebuffer()!;\n        gl.settings().frameBuffer(this).apply(() => {\n            gl.handle.framebufferTexture2D(\n                GlEnum.FRAMEBUFFER,\n                GlEnum.COLOR_ATTACHMENT0,\n                GlEnum.TEXTURE_2D,\n                colorBuffer.handle,\n                0,\n            );\n            depthBuffer && gl.handle.framebufferRenderbuffer(\n                GlEnum.FRAMEBUFFER,\n                GlEnum.DEPTH_ATTACHMENT,\n                GlEnum.RENDERBUFFER,\n                depthBuffer.handle\n            );\n        });\n    }\n\n    dispose() {\n        this.gl.handle.deleteFramebuffer(this.handle);\n    }\n}\n\n/**\n * Depth buffer\n */\nexport class RenderBuffer implements Disposable {\n    public readonly handle: WebGLRenderbuffer;\n\n    constructor(\n        public readonly gl: Gl,\n        private widthValue: number,\n        private heightValue: number,\n    ) {\n        this.handle = gl.handle.createRenderbuffer()!;\n        gl.settings().renderBuffer(this).apply(() => {\n            gl.handle.renderbufferStorage(\n                GlEnum.RENDERBUFFER,\n                GlEnum.DEPTH_COMPONENT16,\n                widthValue,\n                heightValue,\n            );\n        });\n    }\n\n    get width() {\n        return this.widthValue;\n    }\n\n    get height() {\n        return this.heightValue;\n    }\n\n    resize(width: number, height: number): this {\n        const { gl } = this;\n        if (width !== this.width || height !== this.height) {\n            this.widthValue = width;\n            this.heightValue = height;\n            gl.settings().renderBuffer(this).apply(() => {\n                gl.handle.renderbufferStorage(\n                    GlEnum.RENDERBUFFER,\n                    GlEnum.DEPTH_COMPONENT16,\n                    width,\n                    height,\n                );\n            });\n        }\n        return this\n    }\n\n    dispose() {\n        this.gl.handle.deleteRenderbuffer(this.handle);\n    }\n}\n\nexport class ArrayBuffer implements Disposable {\n    readonly handle: WebGLBuffer;\n    \n    private lengthValue = 0;\n    public get length() {\n        return this.lengthValue;\n    }\n\n    constructor(\n        readonly gl: Gl,\n        data: Float32Array | number[] | null = null,\n        /**\n         * @default BufferUsage.Dynamic\n         */\n        private readonly usage: BufferUsage = BufferUsage.Dynamic,\n    ) {\n        this.handle = gl.handle.createBuffer()!;\n        data && this.setContent(data);\n    }\n\n    setContent(data: Float32Array | number[]) {\n        const content = data instanceof Float32Array ? data : new Float32Array(data);\n        this.lengthValue = content.length;\n\n        const gl = this.gl;\n\n        gl.settings().arrayBuffer(this).apply(() => {\n            gl.handle.bufferData(\n                WebGL2RenderingContext.ARRAY_BUFFER,\n                content,\n                this.usage,\n            );\n        });\n\n        return this;\n    }\n\n    dispose() {\n        this.gl.handle.deleteBuffer(this.handle);\n    }\n}\n\nexport class ElementsBuffer implements Disposable {\n    public readonly handle: WebGLBuffer;\n    \n    private lengthValue = 0;\n    public get length() {\n        return this.lengthValue;\n    }\n\n    constructor(\n        public readonly gl: Gl,\n        data: Uint8Array | Uint16Array | number[] | null = null,\n        /**\n         * @default BufferUsage.Dynamic\n         */\n        private readonly usage: BufferUsage = BufferUsage.Dynamic,\n    ) {\n        this.handle = gl.handle.createBuffer()!;\n        data && this.setContent(data);\n    }\n\n    setContent(data: Uint8Array | Uint16Array | number[]) {\n        const content = (data instanceof Uint8Array || data instanceof Uint16Array) ? data : new Uint16Array(data);\n        this.lengthValue = content.length;\n\n        const gl = this.gl;\n\n        gl.settings().elementsBuffer(this).apply(() => {\n            gl.handle.bufferData(\n                WebGL2RenderingContext.ARRAY_BUFFER,\n                content,\n                this.usage,\n            );\n        });\n\n        return this;\n    }\n\n    dispose() {\n        this.gl.handle.deleteBuffer(this.handle);\n    }\n}\n\nclass Shader implements Disposable {\n    readonly handle: WebGLShader;\n\n    constructor(\n        public readonly gl: Gl,\n        public readonly type: ShaderType,\n        public readonly source: string,\n    ) {\n        const handle = this.handle = gl.handle.createShader(type)!;\n\n        gl.handle.shaderSource(handle, source);\n        gl.handle.compileShader(handle);\n        if (gl.handle.getShaderParameter(handle, GlEnum.COMPILE_STATUS) === false) {\n            throw new Error(`WebGL error '${gl.handle.getShaderInfoLog(handle)}' in '${source}'`);\n        }\n    }\n\n    dispose() {\n        this.gl.handle.deleteShader(this.handle);\n    }\n}\n\n\nexport interface UniformRecord {\n    location: WebGLUniformLocation;\n    type: number;\n    size: number;\n}\n\nexport interface AttributeRecord {\n    location: number;\n    type: number;\n    size: number;\n}\n\nexport class Program implements Disposable {\n    readonly handle: WebGLProgram;\n\n    readonly uniforms: { [name: string]: UniformRecord } = {};\n    readonly attributes: { [name: string]: AttributeRecord } = {};\n\n    constructor(\n        public readonly gl: Gl,\n        public readonly vertex: Shader,\n        public readonly fragment: Shader,\n    ) {\n        const handle = this.handle = gl.handle.createProgram()!;\n        gl.handle.attachShader(handle, vertex.handle);\n        gl.handle.attachShader(handle, fragment.handle);\n        gl.handle.linkProgram(handle);\n        if (gl.handle.getProgramParameter(handle, GlEnum.LINK_STATUS) === false) {\n            throw new Error(gl.handle.getProgramInfoLog(handle) || `Program linking error:\\n${vertex.source};\\n${fragment.source}`);\n        }\n\n        // uniforms\n        const uniformsCount: number = gl.handle.getProgramParameter(handle, GlEnum.ACTIVE_UNIFORMS);\n        for (let i = 0; i < uniformsCount; i++) {\n            const info = gl.handle.getActiveUniform(handle, i);\n            if (info !== null) {\n                this.uniforms[info.name] = {\n                    type: info.type,\n                    location: gl.handle.getUniformLocation(handle, info.name)!,\n                    size: info.size,\n                };\n            }\n        }\n\n        // attributes\n        const attributesCount = gl.handle.getProgramParameter(handle, GlEnum.ACTIVE_ATTRIBUTES);\n        for (let i = 0; i < attributesCount; i++) {\n            const info = gl.handle.getActiveAttrib(handle, i);\n            if (info != null) {\n                this.attributes[info.name] = {\n                    type: info.type,\n                    location: i,\n                    size: info.size,\n                };\n            }\n        }\n    }\n\n    setUniform(name: string, value: number[]) {\n        const { gl, uniforms } = this;\n        const uniform = uniforms[name];\n        if (uniform) {\n            const { location, type } = uniform;\n            gl.settings().program(this).apply(() => {\n                switch (type) {\n                case GlEnum.BOOL:\n                    gl.handle.uniform1i(location, value[0] ? 1 : 0);\n                    break;\n                case GlEnum.SAMPLER_2D:\n                    gl.handle.uniform1iv(location, value);\n                    break;\n                case GlEnum.FLOAT:\n                    gl.handle.uniform1fv(location, value);\n                    break;\n                case GlEnum.FLOAT_VEC2:\n                    gl.handle.uniform2fv(location, value);\n                    break;\n                case GlEnum.FLOAT_VEC3:\n                    gl.handle.uniform3fv(location, value);\n                    break;\n                case GlEnum.FLOAT_VEC4:\n                    gl.handle.uniform4fv(location, value);\n                    break;\n                case GlEnum.FLOAT_MAT2:\n                    gl.handle.uniformMatrix2fv(location, false, value);\n                    break;\n                case GlEnum.FLOAT_MAT3:\n                    gl.handle.uniformMatrix3fv(location, false, value);\n                    break;\n                case GlEnum.FLOAT_MAT4:\n                    gl.handle.uniformMatrix4fv(location, false, value);\n                    break;\n                }\n            });\n        }\n    }\n\n    setAttribute(name: string, buffer: ArrayBuffer, strideInFloats: number, offsetInFloats: number) {\n        const attr = this.attributes[name];\n        if (attr != null) {\n            const { gl } = this;\n\n            gl.settings().arrayBuffer(buffer).apply(() => {\n                gl.handle.vertexAttribPointer(\n                    attr.location,\n                    (() => {\n                        switch (attr.type) {\n                        case GlEnum.FLOAT:\n                            return 1;\n                        case GlEnum.FLOAT_VEC2:\n                            return 2;\n                        case GlEnum.FLOAT_VEC3:\n                            return 3;\n                        case GlEnum.FLOAT_VEC4:\n                            return 4;\n                        case GlEnum.FLOAT_MAT2:\n                            return 4;\n                        case GlEnum.FLOAT_MAT3:\n                            return 9;\n                        case GlEnum.FLOAT_MAT4:\n                            return 16;\n                        default:\n                            throw new Error(`Invalid attribute type '${attr.type}'`);\n                        }\n                    })(),\n                    GlEnum.FLOAT,\n                    false,\n                    strideInFloats * 4,\n                    offsetInFloats * 4\n                );\n            });\n        } else {\n            console.warn(`Attribute '${name}' not found`)\n        }\n    }\n\n    dispose() {\n        this.gl.handle.deleteProgram(this.handle);\n    }\n}\n","import { Texture } from \"./webgl\";\n\nconst id = (() => {\n    let sequence = 0;\n    return function id() {\n        return sequence++;\n    };\n})();\n\nexport enum Type {\n    Scalar = \"float\",\n    Vector2 = \"vec2\",\n    Matrix2 = \"mat2\",\n    Vector3 = \"vec3\",\n    Matrix3 = \"mat3\",\n    Vector4 = \"vec4\",\n    Matrix4 = \"mat4\",\n    Boolean = \"bool\",\n    Sampler = \"sampler2D\",\n}\n\nexport enum Precision {\n    High = \"highp\",\n    Medium = \"mediump\",\n    Low = \"lowp\",\n}\n\nexport type TypeSize = 1 | 2 | 3 | 4;\n\n\nexport namespace Type {\n    export function size(type: Type.Boolean | Type.Scalar | Type.Sampler): 1;\n    export function size(type: Type.Vector2 | Type.Matrix2): 2;\n    export function size(type: Type.Vector3 | Type.Matrix3): 3;\n    export function size(type: Type.Vector4 | Type.Matrix4): 4;\n    export function size(type: Type): TypeSize;\n    export function size(type: Type): TypeSize {\n        switch (type) {\n        case Type.Boolean:\n        case Type.Scalar:\n        case Type.Sampler:\n            return 1;\n        case Type.Vector2:\n        case Type.Matrix2:\n            return 2;\n        case Type.Vector3:\n        case Type.Matrix3:\n                return 3;\n        case Type.Vector4:\n        case Type.Matrix4:\n                return 4;\n        }\n    }\n\n    export function vector(size: 2): Type.Vector2;\n    export function vector(size: 3): Type.Vector3;\n    export function vector(size: 4): Type.Vector4;\n    export function vector(size: 2 | 3 | 4): Type.AnyVector;\n    export function vector(size: 2 | 3 | 4): Type.AnyVector {\n        switch (size) {\n        case 2:\n            return Type.Vector2;\n        case 3:\n            return Type.Vector3;\n        case 4:\n            return Type.Vector4;\n        }\n    }\n\n    export function numeric(size: 1): Type.Scalar;\n    export function numeric(size: 2): Type.Vector2;\n    export function numeric(size: 3): Type.Vector3;\n    export function numeric(size: 4): Type.Vector4;\n    export function numeric(size: TypeSize): Type.AnyNumeric;\n    export function numeric(size: TypeSize): Type.AnyNumeric {\n        switch (size) {\n        case 1:\n            return Type.Scalar;\n        case 2:\n            return Type.Vector2;\n        case 3:\n            return Type.Vector3;\n        case 4:\n            return Type.Vector4;\n        }\n    }\n\n    export type Numeric<S extends TypeSize> =\n        S extends 1 ? Type.Scalar :\n        S extends 2 ? Type.Vector2 :\n        S extends 3 ? Type.Vector3 :\n        Type.Vector4;\n\n    export type GetSize<T extends Type.AnyNumeric> =\n        T extends Type.Scalar ? 1 :\n        T extends Type.Vector2 ? 2 :\n        T extends Type.Vector3 ? 3 :\n        4;\n    \n    export type Indexes<T extends Type.AnyVector> =\n        T extends Type.Vector2 ? 0 | 1 :\n        T extends Type.Vector3 ? 0 | 1 | 2 :\n        0 | 1 | 2 | 3;\n\n    export type AnyVector = Type.Vector2 | Type.Vector3 | Type.Vector4;\n    export type AnyMatrix = Type.Matrix2 | Type.Matrix3 | Type.Matrix4;\n    export type AnyNumeric = Type.Scalar | AnyVector;\n\n    export type JsType<T extends Type> =\n        T extends Type.Scalar ? number :\n        T extends Type.Vector2 ? number[] | { x: number, y: number } :\n        T extends Type.Vector3 ? number[] | { x: number, y: number, z: number } :\n        T extends Type.Vector4 ? number[] :\n        T extends Type.Matrix2 ? number[] :\n        T extends Type.Matrix3 ? number[] :\n        T extends Type.Matrix4 ? number[] :\n        T extends Type.Sampler ? Texture :\n        never;\n}\n\nexport type Value<T extends Type = Type> = Readonly<{\n    type: T;\n    content: string;\n}>;\n\nexport class GlslBuilder {\n    private global = \"\";\n    private local = \"\";\n\n    constructor(private readonly cache = new Map<string, any>()) {\n\n    }\n\n    once<R>(id: string, callback: () => R): R {\n        if (this.cache.has(id)) {\n            return this.cache.get(id) as R;\n        } else {\n            const result = callback();\n            this.cache.set(id, result);\n            return result;\n        }\n    }\n    getGlobal(): string {\n        return this.global;\n    }\n    addGlobal(content: string): this {\n        this.global += content;\n        return this;\n    }\n    getLocal(): string {\n        return this.local;\n    }\n    addLocal(content: string): this {\n        this.local += content;\n        return this;\n    }\n\n    child() {\n        return new GlslBuilder(this.cache);\n    }\n}\n\nexport namespace Glsl {\n    export type Boolean = Glsl<Type.Boolean>;\n    export type Scalar = Glsl<Type.Scalar>;\n    export type Vector2 = Glsl<Type.Vector2>;\n    export type Vector3 = Glsl<Type.Vector3>;\n    export type Vector4 = Glsl<Type.Vector4>;\n    export type Matrix2 = Glsl<Type.Matrix2>;\n    export type Matrix3 = Glsl<Type.Matrix3>;\n    export type Matrix4 = Glsl<Type.Matrix4>;\n    export type Sampler = Glsl<Type.Sampler>;\n    export type AnyVector = Glsl<Type.AnyVector>;\n    export type AnyNumeric = Glsl<Type.AnyNumeric>;\n    export type AnyMatrix = Glsl<Type.AnyMatrix>;\n}\n\nconst operators = \"==+-*/<><=>=!&&||\";\n\nexport class Glsl<T extends Type = Type> {\n\n    constructor(public readonly getValue: (builder: GlslBuilder) => Value<T>) {\n\n    }\n\n    private static call(\n        name: string,\n        values: (Glsl | number)[],\n        rtype: (types: Type[]) => Type,\n    ) {\n        const isOperator = operators.indexOf(name) !== -1;\n        const glsls = values.map(v => typeof v === \"number\" ? val(v) : v);\n        if (values.length === 2 && isOperator) {\n            return new Glsl((builder => {\n                const computed = glsls.map(v => v.getValue(builder));\n                return {\n                    type: rtype(computed.map(v => v.type)),\n                    content: `((${computed[0].content}) ${name} (${computed[1].content}))`,\n                };\n            }));\n        } else {\n            return new Glsl((builder => {\n                const computed = glsls.map(v => v.getValue(builder));\n                return {\n                    type: rtype(computed.map(v => v.type)),\n                    content: `${name}(${computed.map(v => v.content).join(\", \")})`,\n                };\n            }));\n        }\n    }\n\n    private static unary<X extends Type = Type.AnyNumeric>(name: string) {\n        return function <A extends X>(this: Glsl<A>): Glsl<A> {\n            return Glsl.call(name, [this], t => t[0]) as Glsl<A>;\n        };\n    }\n\n    sin = Glsl.unary(\"sin\");\n    cos = Glsl.unary(\"cos\");\n    radians = Glsl.unary(\"radians\");\n    degrees = Glsl.unary(\"degrees\");\n    tan = Glsl.unary(\"tan\");\n    asin = Glsl.unary(\"asin\");\n    acos = Glsl.unary(\"acos\");\n\n    exp = Glsl.unary(\"exp\");\n    log = Glsl.unary(\"log\");\n    exp2 = Glsl.unary(\"exp2\");\n    log2 = Glsl.unary(\"log2\")\n    sqrt = Glsl.unary(\"sqrt\");\n    inversesqrt = Glsl.unary(\"inversesqrt\");\n\n    abs = Glsl.unary(\"abs\");\n    sign = Glsl.unary(\"sign\");\n    floor = Glsl.unary(\"floor\");\n    ceil = Glsl.unary(\"floor\");\n    fract = Glsl.unary(\"fract\");\n    normalize = Glsl.unary(\"normalize\");\n\n    round<T extends Glsl.AnyNumeric>(this: T): T {\n        return this.add(0.5).floor() as T;\n    }\n\n    not = Glsl.unary<Type.Boolean>(\"!\");\n\n    atan<T extends Type.AnyNumeric>(this: Glsl<T>): Glsl<T>;\n    atan<T extends Type.AnyNumeric>(this: Glsl<T>, x: Glsl<T>): Glsl<T>;\n    atan(this: Glsl.Scalar, x: number): Glsl.Scalar;\n    atan(v?: Glsl.AnyNumeric | number): Glsl.AnyNumeric {\n        if (v === undefined) {\n            return Glsl.call(\"atan\", [this], ([type]) => type) as Glsl.AnyNumeric;\n        } else {\n            return Glsl.call(\"atan\", [this, v], types => types[0]) as Glsl.AnyNumeric;\n        }\n    }\n\n    pow(this: Glsl.Scalar, p: Glsl.Scalar): Glsl.Scalar;\n    pow(this: Glsl.Vector2, p: Glsl.Vector2): Glsl.Vector2;\n    pow(this: Glsl.Vector3, p: Glsl.Vector3): Glsl.Vector3;\n    pow(this: Glsl.Vector4, p: Glsl.Vector4): Glsl.Vector4;\n    pow(this: Glsl.Scalar, p: number): Glsl.Scalar;\n    pow(p: Glsl.AnyNumeric | number): Glsl<Type> {\n        const pv = typeof p === \"number\" ? val(p) : p;\n        return Glsl.call(\"pow\", [this, pv], ([t]) => t);\n    }\n\n    mod<P extends Type.AnyNumeric>(this: Glsl<P>, p: Glsl<P>): Glsl<P>;\n    mod(this: Glsl.Scalar, p: number): Glsl.Scalar;\n    mod(p: Glsl.AnyNumeric | number): Glsl<Type> {\n        const pv = typeof p === \"number\" ? val(p) : p;\n        return Glsl.call(\"mod\", [this, pv], ([t]) => t);\n    }\n\n    min<P extends Type.AnyNumeric>(this: Glsl<P>, p: Glsl<P>): Glsl<P>;\n    min(this: Glsl.Scalar, p: number): Glsl.Scalar;\n    min(p: Glsl.AnyNumeric | number): Glsl<Type> {\n        const pv = typeof p === \"number\" ? val(p) : p;\n        return Glsl.call(\"min\", [this, pv], ([t]) => t);\n    }\n\n    max<P extends Type.AnyNumeric>(this: Glsl<P>, p: Glsl<P>): Glsl<P>;\n    max(this: Glsl.Scalar, p: number): Glsl.Scalar;\n    max(p: Glsl.AnyNumeric | number): Glsl<Type> {\n        return Glsl.call(\"max\", [this, p], ([t]) => t);\n    }\n\n    mix<P extends Glsl.AnyNumeric>(this: P, other: P, p: P): P;\n    mix<P extends Glsl.AnyNumeric>(this: P, other: P, p: number): P;\n    mix(this: Glsl.Scalar, other: number, p: Glsl.Scalar | number): Glsl.Scalar;\n    mix(other: Glsl.AnyNumeric | number, p: Glsl.AnyNumeric | number): Glsl<Type> {\n        return Glsl.call(\"mix\", [this, other, p], ([t]) => t);\n    }\n\n    clamp<T extends Glsl.AnyNumeric>(this: T, min: T, max: T): T;\n    clamp<T extends Glsl.AnyNumeric>(this: T, min: Glsl.Scalar | number, max: Glsl.Scalar | number): T;\n    clamp(min: Glsl.AnyNumeric | number, max: Glsl.AnyNumeric | number): Glsl {\n        return Glsl.call(\"clamp\", [this, min, max], ([t]) => t);\n    }\n\n    \n    smoothstep<T extends Glsl.AnyNumeric>(this: T, edge1: T, edge2: T): T;\n    smoothstep<T extends Glsl.AnyNumeric>(this: Glsl.Scalar, edge1: Glsl.Scalar | number, edge2: Glsl.Scalar | number): T;\n    smoothstep(this: Glsl.Scalar, edge1: Glsl.Scalar | number, edge2: Glsl.Scalar | number): Glsl.Scalar;\n    smoothstep(edge1: Glsl | number, edge2: Glsl | number): Glsl {\n        return Glsl.call(\"smoothstep\", [edge1, edge2, this], ([t]) => t);\n    }\n\n    length(this: Glsl.AnyNumeric): Glsl.Scalar;\n    length(): Glsl {\n        return Glsl.call(\"length\", [this], () => Type.Scalar);\n    }\n\n    distance<T extends Glsl.AnyNumeric>(this: T, other: T): Glsl.Scalar;\n    distance(this: Glsl.Scalar, other: number): Glsl.Scalar;\n    /**\n     * Distance to other point\n     */\n    distance(other: Glsl | number): Glsl {\n        return Glsl.call(\"distance\", [this, other], () => Type.Scalar);\n    }\n\n    dot<T extends Glsl.AnyNumeric>(this: T, other: T): Glsl.Scalar;\n    dot(this: Glsl.Scalar, other: number): Glsl.Scalar;\n    /**\n     * Dot product\n     */\n    dot(other: Glsl | number): Glsl {\n        return Glsl.call(\"dot\", [this, other], () => Type.Scalar);\n    }\n\n    reflect<T extends Glsl.AnyNumeric>(this: T, n: T): T;\n    reflect(v: Glsl): Glsl {\n        return Glsl.call(\"reflect\", [this, v], ([t]) => t);\n    }\n\n    refract<T extends Glsl.AnyNumeric>(this: T, n: T, eta: Glsl.Scalar | number): T;\n    refract(n: Glsl, eta: Glsl | number): Glsl {\n        return Glsl.call(\"refract\", [this, n, eta], ([t]) => t);\n    }\n\n    /**\n     * Get texture value at the specified point \n     */\n    texture2D = function (this: Glsl.Sampler, point: Glsl.Vector2): Glsl.Vector4 {\n        return Glsl.call(\"texture2D\", [this, point], () => Type.Vector4) as Glsl.Vector4;\n    }\n\n    add<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number): T;\n    add<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: Glsl.Scalar, other: T): T\n    /**\n     * Addition\n     */\n    add<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number): Glsl.AnyNumeric | Glsl.AnyMatrix {\n        return Glsl.call(\"+\", [this, other], ([t]) => t) as T;\n    }\n\n    sub<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number): T;\n    sub<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: Glsl.Scalar, other: T): T\n    /**\n     * Substraction\n     */\n    sub<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number): Glsl.AnyNumeric | Glsl.AnyMatrix {\n        return Glsl.call(\"-\", [this, other], ([t]) => t) as T;\n    }\n\n    div<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number): T;\n    div<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: Glsl.Scalar, other: T): T\n    /**\n     * Division \n     */\n    div<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number): Glsl.AnyNumeric | Glsl.AnyMatrix {\n        return Glsl.call(\"+\", [this, other], ([t]) => t) as T;\n    }\n\n    mul<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number ): T;\n    mul<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: Glsl.Scalar, other: T | Glsl.Scalar | number ): T;\n    mul(this: Glsl.Matrix2, other: Glsl.Vector2): Glsl.Vector2;\n    mul(this: Glsl.Vector2, other: Glsl.Matrix2): Glsl.Vector2;\n    mul(this: Glsl.Matrix3, other: Glsl.Vector3): Glsl.Vector3;\n    mul(this: Glsl.Vector3, other: Glsl.Matrix3): Glsl.Vector3;\n    mul(this: Glsl.Matrix4, other: Glsl.Vector4): Glsl.Vector4;\n    mul(this: Glsl.Vector4, other: Glsl.Matrix4): Glsl.Vector4;\n    /**\n     * Multiplication operation \n     */\n    mul<T extends Glsl.AnyNumeric | Glsl.AnyMatrix>(this: T, other: T | Glsl.Scalar | number ): T {\n        return Glsl.call(\"*\", [this, other], ([t]) => t) as T;\n    }\n\n    private static bool(name: string) {\n        return function(this: Glsl.Scalar, other: Glsl.Scalar | number): Glsl.Boolean {\n            return Glsl.call(name, [this, other], () => Type.Boolean) as Glsl.Boolean;\n        }\n    }\n\n    /** Less */\n    lt = Glsl.bool(\"<\");\n    /** Greater */\n    gt = Glsl.bool(\">\");\n    /** Less or equal */\n    lte = Glsl.bool(\"<=\");\n    /** Greater or equal */\n    gte = Glsl.bool(\">=\");\n    /** Equal */\n    eq = Glsl.bool(\"==\");\n    /** Not equal */\n    neq = Glsl.bool(\"!=\");\n\n    and(this: Glsl.Boolean, other: Glsl.Boolean): Glsl.Boolean {\n        return Glsl.call(\"&&\", [this, other], () => Type.Boolean) as Glsl.Boolean;\n    }\n    or(this: Glsl.Boolean, other: Glsl.Boolean): Glsl.Boolean {\n        return Glsl.call(\"||\", [this, other], () => Type.Boolean) as Glsl.Boolean;\n    }\n\n    /**\n     * Save some expression into a variable\n     */\n    mem<T extends Glsl>(this: T, precision: Precision): T {\n        const name = `mem${id()}`;\n        return new Glsl(builder => {\n            const v = this.getValue(builder);\n            builder.once(\n                name,\n                () => {\n                    builder.addLocal(`${precision} ${v.type} ${name} = ${v.content};\\n`);\n                },\n            );\n            return {\n                type: v.type,\n                content: name,\n            };\n        }) as T;\n    }\n\n    /**\n     * Save some expression with high quality into a variable\n     */\n    memHQ() { return this.mem(Precision.High); }\n    /**\n     * Save some expression with medium quality into a variable\n     */\n    memMQ() { return this.mem(Precision.Medium); }\n    /**\n     * Save some expression with low quality into a variable\n     */\n    memLQ() { return this.mem(Precision.Low); }\n\n    /**\n     * Conditional expression\n     * @param precision Precision of the expression result\n     * @param whenTrue True brunch of the condition\n     * @param whenFalse False brunch of the condition\n     */\n    cond<T extends Glsl>(this: Glsl.Boolean, precision: Precision, whenTrue: T, whenFalse: T): T {\n        const name = `cond${id()}`;\n        let type: Type | null = null;\n        return new Glsl(builder => {\n            builder.once(\n                name,\n                () => {\n                    const trueBuilder = builder.child();\n                    const trueValue = whenTrue.getValue(trueBuilder);\n\n                    const falseBuilder = builder.child();\n                    const falseValue = whenFalse.getValue(falseBuilder);\n\n                    const condition = this.getValue(builder);\n\n                    type = trueValue.type;\n\n                    builder\n                        .addGlobal(trueBuilder.getGlobal())\n                        .addGlobal(falseBuilder.getGlobal());\n\n                    builder\n                        .addLocal(`${trueValue.type !== Type.Boolean ? precision + \" \" : \"\"}${trueValue.type} ${name};\\n`)\n                        .addLocal(`if (${condition.content}) {\\n`)\n                        .addLocal(trueBuilder.getLocal())\n                        .addLocal(`${name} = ${trueValue.content};\\n`)\n                        .addLocal(\"} else {\\n\")\n                        .addLocal(falseBuilder.getLocal())\n                        .addLocal(`${name} = ${falseValue.content};\\n`)\n                        .addLocal(\"}\\n\");\n                },\n            );\n\n            return {\n                type: type!,\n                content: name,\n            };\n        }) as T;\n    }\n\n    condHQ<T extends Glsl>(this: Glsl.Boolean, whenTrue: T, whenFalse: T): T {\n        return this.cond(Precision.High, whenTrue, whenFalse);\n    }\n    condMQ<T extends Glsl>(this: Glsl.Boolean, whenTrue: T, whenFalse: T): T {\n        return this.cond(Precision.Medium, whenTrue, whenFalse);\n    }\n    condLQ<T extends Glsl>(this: Glsl.Boolean, whenTrue: T, whenFalse: T): T {\n        return this.cond(Precision.Low, whenTrue, whenFalse);\n    }\n\n    take<T extends Type.AnyVector>(this: Glsl<T>, i: Type.Indexes<T>): Glsl.Scalar;\n    take<T extends Type.AnyVector>(this: Glsl<T>, i1: Type.Indexes<T>, i2: Type.Indexes<T>): Glsl.Vector2;\n    take<T extends Type.Vector3 | Type.Vector4>(this: Glsl<T>, i1: Type.Indexes<T>, i2: Type.Indexes<T>, i3: Type.Indexes<T>): Glsl.Vector3;\n    take(this: Glsl.Vector4, i1: Type.Indexes<Type.Vector4>, i2: Type.Indexes<Type.Vector4>, i3: Type.Indexes<Type.Vector4>, i4: Type.Indexes<Type.Vector4>): Glsl.Vector4;\n    /**\n     * Take one or more components from vector\n     */\n    take(i1: number, i2?: number, i3?: number, i4?: number): Glsl.AnyNumeric {\n        return new Glsl((builder) => {\n            const indexes = [i1, i2, i3, i4].filter(i => i !== undefined) as number[];\n            const value = this.getValue(builder);\n            return {\n                type: indexes.length === 1 ? Type.Scalar : Type.vector(indexes.length as 2 | 3 | 4),\n                content: `(${value.content}).${indexes.map(i => {\n                    return \"xyzw\".charAt(i);\n                }).join(\"\")}`,\n            }\n        });\n    }\n    \n    /**\n     * Get the first component of vector\n     */\n    x(this: Glsl.AnyVector) { return this.take(0); }\n    /**\n     * Get the second component of vector\n     */\n    y(this: Glsl.AnyVector) { return this.take(1); }\n    /**\n     * Get the third component of vector\n     */\n    z(this: Glsl.AnyVector) { return this.take(2); }\n    /**\n     * Get the fourth component of vector\n     */\n    w(this: Glsl.AnyVector) { return this.take(3); }\n\n    /**\n     * Get the first component of vector\n     */\n    r(this: Glsl.AnyVector) { return this.take(0); }\n    /**\n     * Get the second component of vector\n     */\n    g(this: Glsl.AnyVector) { return this.take(1); }\n    /**\n     * Get the third component of vector\n     */\n    b(this: Glsl.AnyVector) { return this.take(2); }\n    /**\n     * Get the fourth component of vector\n     */\n    a(this: Glsl.AnyVector) { return this.take(3); }\n\n    cat(this: Glsl.Scalar, v: Glsl.Scalar | number): Glsl.Vector2;\n    cat(this: Glsl.Scalar, v: Glsl.Vector2): Glsl.Vector3;\n    cat(this: Glsl.Scalar, v: Glsl.Vector3): Glsl.Vector4;\n    cat(this: Glsl.Vector2, v: Glsl.Scalar): Glsl.Vector3;\n    cat(this: Glsl.Vector2, v: Glsl.Vector2): Glsl.Vector4;\n    cat(this: Glsl.Vector3, v: Glsl.Scalar): Glsl.Vector4;\n    /**\n     * Create vector as a concatenation of current value and argument\n     */\n    cat(\n        this: Glsl<Type.Scalar | Type.Vector2 | Type.Vector3>,\n        v: Glsl<Type.Scalar | Type.Vector2 | Type.Vector3> | number,\n    ): Glsl.AnyNumeric {\n        if (typeof v === \"number\") {\n            return (this as Glsl.Scalar).cat(Glsl.val(v));\n        } else {\n            return new Glsl(builder => {\n                const v1 = this.getValue(builder),\n                    v2 = v.getValue(builder),\n                    rt = Type.numeric((Type.size(v1.type) + Type.size(v2.type)) as TypeSize);\n                return {\n                    type: rt,\n                    content: `${rt}(${v1.content}, ${v2.content})`,\n                };\n            });\n        }\n    }\n\n    static val(v: boolean): Glsl<Type.Boolean>\n    static val(v: number): Glsl.Scalar;\n    static val<T extends Glsl>(v: T): T;\n    static val(\n        v1: Glsl.Scalar | number,\n        v2: Glsl.Scalar | number\n    ): Glsl.Vector2;\n    static val(\n        v1: Glsl.Scalar | number,\n        v2: Glsl.Vector2\n    ): Glsl.Vector3;\n    static val(\n        v1: Glsl.Scalar | number,\n        v2: Glsl.Vector3\n    ): Glsl.Vector4;\n    static val(\n        v1: Glsl.Vector2,\n        v2: Glsl.Scalar | number,\n    ): Glsl.Vector3;\n    static val(\n        v1: Glsl.Vector3,\n        v2: Glsl.Scalar | number,\n    ): Glsl.Vector4;\n\n    static val(\n        v1: Glsl.Scalar | number,\n        v2: Glsl.Scalar | number,\n        v3: Glsl.Scalar | number,\n    ): Glsl.Vector3;\n    static val(\n        v1: Glsl.Vector2,\n        v2: Glsl.Scalar | number,\n        v3: Glsl.Scalar | number,\n    ): Glsl.Vector4;\n    static val(\n        v1: Glsl.Scalar | number,\n        v2: Glsl.Vector2,\n        v3: Glsl.Scalar | number,\n    ): Glsl.Vector4;\n    static val(\n        v1: Glsl.Scalar | number,\n        v2: Glsl.Scalar | number,\n        v3: Glsl.Vector2,\n    ): Glsl.Vector4;\n\n    static val(\n        v1: Glsl.Scalar | number,\n        v2: Glsl.Scalar | number,\n        v3: Glsl.Scalar | number,\n        v4: Glsl.Scalar | number,\n    ): Glsl.Vector4;\n\n    /**\n     * Wrap set of values into single GLSL value\n     */\n    static val(...values: (Glsl | number | boolean)[]): Glsl {\n        if (values.length === 1) {\n            if (typeof values[0] === \"boolean\") {\n                return new Glsl(() => ({\n                    type: Type.Boolean,\n                    content: values[0] ? \"1\" : \"0\",\n                }));\n            } else if (values[0] instanceof Glsl) {\n                return values[0];\n            } else {\n                const s = values[0].toString();\n                return new Glsl(() => ({\n                    type: Type.Scalar,\n                    content: /[e\\.]/.test(s) ? s : `${s}.0`,\n                }));\n            }\n        } else if (values.some(v => typeof v === \"number\")) {\n            const vs = values.map(v => Glsl.val(v as any));\n            return Glsl.val.apply(null, vs as any);\n        } else {\n            return values.reduce((r, v) => (r as any).cat(v)) as Glsl;\n        }\n    }\n\n    static PI = Glsl.val(Math.PI);\n}\n\n/**\n * Description of attributes/uniforms/varyings\n */\nexport type TypeMap = {\n    [key: string]: Type | [Type, Precision];\n};\n\nexport namespace TypeMap {\n    export type GetType<T extends Type | [Type, Precision]> = T extends Type ? T : T[0];\n\n    export type JsTypeMap<T extends TypeMap> = {\n        [key in keyof T]: Type.JsType<GetType<T[key]>>;\n    };\n\n    export type ToValues<M extends TypeMap> = {\n        [key in keyof M]: Glsl<GetType<M[key]>>;\n    }\n\n    export type WithoutPrecision<M extends TypeMap> = {\n        [key in keyof M]: GetType<M[key]>;\n    }\n\n    export function getType(v: Type | [Type, Precision]): Type {\n        return Array.isArray(v) ? v[0] : v;\n    }\n    export function getPrecision(v: Type | [Type, Precision]): Precision {\n        return Array.isArray(v) ? v[1] : Precision.High;\n    }\n\n    export function withoutPrecision<M extends TypeMap>(map: M): WithoutPrecision<M> {\n        return Object.keys(map).reduce((r, key) => {\n            r[key] = getType(map[key]);\n            return r;\n        }, {} as { [key: string]: Type }) as WithoutPrecision<M>;\n    }\n\n    export function values(storage: \"uniform\" | \"attribute\" | \"varying\", types: TypeMap) {\n        const result: { [key: string]: Glsl } = {};\n        Object.keys(types).forEach(name => {\n            const type = types[name];\n            result[name] = new Glsl(builder => {\n                builder.once(`types_map_value_${name}`, () => {\n                    builder.addGlobal(`${storage} ${TypeMap.getPrecision(type)} ${TypeMap.getType(type)} ${name};\\n`)\n                });\n                return {\n                    type: TypeMap.getType(type),\n                    content: name,\n                };\n            });\n        });\n        return result;\n    }\n\n    export function stride(map: TypeMap) {\n        let r = 0;\n        for (const i in map) {\n            r += Type.size(getType(map[i]));\n        }\n        return r;\n    }\n\n    export interface LayoutItem {\n        name: string;\n        size: number;\n        stride: number;\n        offset: number;\n    }\n\n    export function layout(map: TypeMap): LayoutItem[] {\n        const s = stride(map);\n\n        return Object.keys(map).reduce((r, name) => {\n            const previous = r.length ? r[r.length - 1] : null;\n            r.push({\n                name: name,\n                stride: s,\n                size: Type.size(getType(map[name])),\n                offset: previous ? previous.offset + previous.size : 0,\n            });\n            return r;\n        }, [] as LayoutItem[]);\n    }\n}\n\n/**\n * Description of a shader program\n */\nexport type SourceConfig<\n    Uniforms extends TypeMap,\n    Attributes extends TypeMap,\n    Instances extends TypeMap,\n    Varyings extends TypeMap = {},\n> = {\n    uniforms: Uniforms,\n    attributes: Attributes,\n    instances: Instances,\n    varyings?: Varyings,\n    vertex: (\n        input: & TypeMap.ToValues<Uniforms>\n            & TypeMap.ToValues<Attributes>\n            & TypeMap.ToValues<Instances>\n    ) => TypeMap.ToValues<Varyings> & {\n        gl_Position: Glsl.Vector4,\n        gl_PointSize?: Glsl.Scalar,\n    },\n    fragment: (\n        input: TypeMap.ToValues<Uniforms>\n            & TypeMap.ToValues<Varyings>\n            & {\n                gl_FragCoord: Glsl.Vector4,\n                gl_FrontFacing: Glsl.Boolean,\n                gl_PointCoord: Glsl.Vector2,\n            }\n    ) => {\n        gl_FragColor: Glsl.Vector4\n    },\n};\n\nexport type ProgramSource<\n    Uniforms extends TypeMap,\n    Attributes extends TypeMap,\n    Instances extends TypeMap,\n> = {\n    uniforms: Uniforms;\n    attributes: Attributes;\n    instances: Instances;\n    fragment: string;\n    vertex: string;\n}\n\nexport namespace ProgramSource {\n    export type GetUniforms<T extends ProgramSource<any, any, any>> = T extends ProgramSource<infer R, any, any> ? R : never;\n    export type GetAttributes<T extends ProgramSource<any, any, any>> = T extends ProgramSource<any, infer R, any> ? R : never;\n    export type GetInstances<T extends ProgramSource<any, any, any>> = T extends ProgramSource<any, any, infer R> ? R : never;\n}\n\n/**\n * Create GLSL program source from argument types and shaders described with the DSL\n */\nexport function source<\n    Uniforms extends TypeMap,\n    Attributes extends TypeMap,\n    Instances extends TypeMap,\n    Varyings extends TypeMap = {},\n>(\n    {\n        uniforms,\n        attributes,\n        varyings,\n        instances,\n        fragment,\n        vertex\n    }: SourceConfig<Uniforms, Attributes, Instances, Varyings>\n): ProgramSource<TypeMap.WithoutPrecision<Uniforms>, TypeMap.WithoutPrecision<Attributes>, TypeMap.WithoutPrecision<Instances>> {\n    const uValues = TypeMap.values(\"uniform\", uniforms);\n    const aValues = TypeMap.values(\"attribute\", { ...attributes, ...instances });\n    const vValues = varyings ? TypeMap.values(\"varying\", varyings) : {};\n\n    // vertex\n    const vertexBuilder = new GlslBuilder();\n\n    Object.keys(vValues).forEach(name => {\n        vValues[name].getValue(vertexBuilder);\n    });\n\n    const vertexOutput = vertex({\n        ...uValues,\n        ...aValues,\n    } as any);\n    const vertexAssignment = Object.keys(vertexOutput).map(name => {\n        return `${name} = ${vertexOutput[name].getValue(vertexBuilder).content};\\n`\n    }).join(\"\");\n    \n    const vertexSource = vertexBuilder.getGlobal()\n        + \"void main() {\\n\"\n        + vertexBuilder.getLocal()\n        + vertexAssignment\n        + \"}\\n\";\n    \n    // fragment\n    const fragmentBuilder = new GlslBuilder();\n\n    Object.keys(vValues).forEach(name => {\n        vValues[name].getValue(vertexBuilder);\n    });\n\n    const fragmentOutput = fragment({\n        ...uValues,\n        ...vValues,\n        gl_FragCoord: new Glsl(() => {\n            return {\n                type: Type.Vector4,\n                content: \"gl_FragCoord\",\n            };\n        }),\n        gl_PointCoord: new Glsl(() => {\n            return {\n                type: Type.Vector2,\n                content: \"gl_FragCoord\",\n            };\n        }),\n        gl_FrontFacing: new Glsl(() => {\n            return {\n                type: Type.Boolean,\n                content: \"gl_FrontFacing\",\n            };\n        }),\n    } as any);\n    const fragmentColor = fragmentOutput.gl_FragColor.getValue(fragmentBuilder);\n    const fragmentSource = fragmentBuilder.getGlobal()\n        + \"void main() {\\n\"\n        + fragmentBuilder.getLocal()\n        + `gl_FragColor = ${fragmentColor.content};\\n`\n        + \"}\\n\";\n\n    // result\n    return {\n        vertex: vertexSource,\n        fragment: fragmentSource,\n        uniforms: TypeMap.withoutPrecision(uniforms),\n        attributes: TypeMap.withoutPrecision(attributes),\n        instances: TypeMap.withoutPrecision(instances),\n    };\n}\n\n/**\n * Wrap set of values into single GLSL value\n */\nexport const val = Glsl.val;\n","import {\n    TypeMap,\n    SourceConfig,\n    source,\n    ProgramSource,\n    Type,\n} from \"./dsl\";\nimport {\n    Gl,\n    Program,\n    ElementsBuffer,\n    ArrayBuffer,\n    PrimitivesType,\n    Texture,\n} from \"./webgl\";\nimport { Disposable } from \"./disposable\";\n\nclass Command<\n    Uniforms extends TypeMap,\n    Attributes extends TypeMap,\n    Instances extends TypeMap,\n> implements Disposable {\n    private readonly program: Program;\n    private readonly attributes: ArrayBuffer;\n    private readonly instances: ArrayBuffer;\n    private readonly elements: ElementsBuffer;\n\n    private readonly attributesStride: number;\n    private readonly attributesLayout: TypeMap.LayoutItem[];\n    private readonly instancesStride: number;\n    private readonly instancesLayout: TypeMap.LayoutItem[];\n    \n    private textureInstances = new Map<number, Texture>();\n    private textureIndexes = new Map<string, number>();\n\n    constructor(\n        public readonly gl: Gl,\n        public readonly primitivesType: PrimitivesType,\n        public readonly source: ProgramSource<Uniforms, Attributes, Instances>\n    ) {\n        this.program = gl.program(source.vertex, source.fragment);\n\n        this.attributes = gl.arrayBuffer();\n        this.instances = gl.arrayBuffer();\n        this.elements = gl.elementsBuffer();\n\n        this.attributesStride = TypeMap.stride(source.attributes);\n        this.attributesLayout = TypeMap.layout(source.attributes);\n        this.instancesStride = TypeMap.stride(source.instances);\n        this.instancesLayout = TypeMap.layout(source.instances);\n\n        this.attributesLayout.forEach(a => {\n            this.program.setAttribute(a.name, this.attributes, a.stride, a.offset);\n        });\n\n        this.instancesLayout.forEach(a => {\n            this.program.setAttribute(a.name, this.attributes, a.stride, a.offset);\n        });\n\n        for (const name in source.uniforms) {\n            if (TypeMap.getType(source.uniforms[name]) === Type.Sampler) {\n                this.textureIndexes.set(name, this.textureIndexes.size);\n            }\n        }\n    }\n\n    private prepareData<M extends TypeMap>(stride: number, layout: TypeMap.LayoutItem[], items: TypeMap.JsTypeMap<M>[]) {\n        const data = new Float32Array(stride * items.length);\n        items.forEach((item, i) => {\n            const offset = stride * i;\n            this.attributesLayout.forEach(layout => {\n                const value = item[layout.name];\n                if (Array.isArray(value)) {\n                    for (let j = 0; j < value.length; j++) {\n                        data[offset + j] = value[j];\n                    }\n                } else if (layout.size === 2) {\n                    const { x, y } = value as { x: number, y: number };\n                    data[offset] = x;\n                    data[offset + 1] = y;\n                } else if (layout.size === 3) {\n                    const { x, y, z } = value as { x: number, y: number, z: number };\n                    data[offset] = x;\n                    data[offset + 1] = y;\n                    data[offset + 2] = z;\n                } else {\n                    throw new Error(`Unsupported attribute '${layout.name}' value: ${JSON.stringify(value)}`);\n                }\n            });\n        });\n        return data;\n    }\n\n    setAttributes(attributes: TypeMap.JsTypeMap<Attributes>[]): this {\n        const data = this.prepareData(this.attributesStride, this.attributesLayout, attributes);\n        this.attributes.setContent(data);\n        return this;\n    }\n\n    setInstances(instances: TypeMap.JsTypeMap<Instances>[]): this {\n        const data = this.prepareData(this.instancesStride, this.instancesLayout, instances);\n        this.instances.setContent(data);\n        return this;\n    }\n\n    setElements(elements: number[] | Uint16Array | Uint8Array): this {\n        this.elements.setContent(elements);\n        return this;\n    }\n\n    setUniforms(data: Partial<TypeMap.JsTypeMap<Uniforms>>): this {\n        const uniforms = this.source.uniforms;\n        for (const i in data) {\n            const value = data[i];\n            let array: number[];\n    \n            if (typeof value === \"number\") {\n                array = [value];\n            } else if (Array.isArray(value)) {\n                array = value;\n            } else if (value instanceof Texture) {\n                const index = this.textureIndexes.get(i)!;\n                this.textureInstances.set(index, value);\n                array = [index];\n            } else if (uniforms[i] === Type.Vector2) {\n                const { x, y } = value as { x: number, y: number };\n                array = [x, y];\n            } else if (uniforms[i] === Type.Vector3) {\n                const { x, y, z } = value as { x: number, y: number, z: number };\n                array = [x, y, z];\n            } else {\n                throw new Error(`Invalid value for uniform '${i}', expected ${uniforms[i]}`);\n            }\n            this.program.setUniform(i, array);\n        }\n        return this;\n    }\n\n    draw(\n        instancesCount = this.instancesStride ? this.instances.length / this.instancesStride : null,\n        verticesCount = this.attributesStride ? this.attributes.length / this.attributesStride : null,\n        elementsCount = this.elements.length,\n    ) {\n        const gl = this.gl;\n\n        gl.settings()\n            .program(this.program)\n            .enabledAttributes(\n                Object.keys(this.program.attributes)\n                    .map(key => {\n                        return this.program.attributes[key]?.location;\n                    })\n                    .filter(v => v !== null && v !== undefined)\n            )\n            .instancedAttributes(\n                this.instancesLayout\n                    .map(v => v.name)\n                    .map(key => {\n                        return this.program.attributes[key]?.location;\n                    })\n                    .filter(v => v !== null && v !== undefined)\n            )\n            .textures(\n                Array.from(this.textureInstances.entries()).reduce((r, [index, texture]) => {\n                    r[index] = texture;\n                    return r;\n                }, new Array<Texture | null>(16).fill(null))\n            )\n            .apply(() => {\n                if (instancesCount !== null && elementsCount !== 0) {\n                    gl.settings().elementsBuffer(this.elements).apply(() => {\n                        gl.drawsInstancedElements(\n                            this.primitivesType,\n                            elementsCount,\n                            instancesCount\n                        );\n                    });\n                } else if (instancesCount !== null && verticesCount !== null) {\n                    gl.drawInstancedArrays(\n                        this.primitivesType,\n                        verticesCount,\n                        instancesCount,\n                    );\n                } else if (elementsCount !== 0) {\n                    gl.settings().elementsBuffer(this.elements).apply(() => {\n                        gl.drawsElements(this.primitivesType, elementsCount);\n                    });\n                } else if (verticesCount) {\n                    gl.drawArrays(\n                        this.primitivesType,\n                        verticesCount,\n                    );\n                } else {\n                    throw new Error(\"Invalid draw dataset\");\n                }\n            });\n    }\n\n    dispose() {\n        this.program.dispose();\n        this.attributes.dispose();\n        this.instances.dispose();\n        this.elements.dispose();\n    }\n}\n\n/**\n * The main function of this library, creates a command with specified parameters and shaders\n * @param gl \n * @param primitivesType Type of primitives to draw\n * @param config Description of attributes, uniforms, varyings, and shaders\n */\nexport function command<\n    Uniforms extends TypeMap,\n    Attributes extends TypeMap,\n    Instances extends TypeMap,\n    Varyings extends TypeMap = {},\n>(\n    gl: Gl,\n    primitivesType: PrimitivesType,\n    config: SourceConfig<Uniforms, Attributes, Instances, Varyings>\n) {\n    return new Command(gl, primitivesType, source(config));\n}\n","export * from \"./webgl\";\nexport * from \"./dsl\";\nexport * from \"./command\";\nexport * from \"./disposable\";"]}